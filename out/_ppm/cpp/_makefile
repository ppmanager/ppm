####################################
#            Constants             #
####################################

-include _project

OUTPUT_DIR = out

ifeq ($(OPERATING_SYSTEM), windows )
	OUTPUT_EXT = .exe
else
	OUTPUT_EXT = 
endif

# Config
OBJECT_DIR = bin
SOURCE_DIR = src
DEFAULT_SOURCE_NAME = _default
COMP = g++

# (x86)
COMP_VERSION=IS_32
CFLAG_VERSION = 

# (64)
# COMP_VERSION=IS_64 
# CFLAG_VERSION = -m64 





# Macros
DEFAULT_SOURCE_DIR = ${SOURCE_DIR}/${DEFAULT_SOURCE_NAME}
CFLAGS = $(CFLAG_VERSION) -std=c++11 -Wall -I$(SOURCE_DIR) -I${DEFAULT_SOURCE_DIR} -D$(OPERATING_SYSTEM) -D$(COMP_VERSION)  -w
OUTPUT_FULL = $(OUTPUT_DIR)/$(OUTPUT_NAME)$(OUTPUT_EXT)


####################################
#             Commands             #
####################################

# Default command
default: build

# Files
INCLUDES=
-include constants.config
CFLAGS += $(INCLUDES)
-include _objs

# Build command
ifneq ("$(wildcard src/_libs/mutex)","")
build: CFLAGS += -D__MUTEX_LIB_INCLUDED__ 
endif
build: init build_all
	@$(COMP) $(CFLAGS) $(OBJSX) -o $(OUTPUT_FULL) $(LIBS)
	@echo "Build finished with success."
	@echo "You can find the resulting file at : "$(OUTPUT_FULL)

# Debug mode
debug: CFLAGS += -DDEBUG
debug: build

# Release mode
release: build
	
# Clean/Clear command
clean:
	@rm -f $(OUTPUT_FULL)
	@rm -f -r $(OBJECT_DIR)
	@echo "Cleaned, ready for a new build."
clear: clean
	
# Help
help:
	@echo "Commands : make [CMD]"
	@echo "With [CMD] option :"
	@echo "   * build [DEFAULT]"
	@echo "   * clean/clear"

run:
	@./$(OUTPUT_FULL)
	
	
####################################
#           Compilations           #
####################################

init:
	@echo "Compiling..."
	@rm -f $(OUTPUT_FULL)
	@mkdir -p $(OBJECT_DIR)
	@mkdir -p $(OUTPUT_DIR)
	
build_all: build_objs
